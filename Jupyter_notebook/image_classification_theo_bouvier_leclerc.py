# -*- coding: utf-8 -*-
"""Image Classification Théo Bouvier-Leclerc

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6tpdz8Em94ZkThV7FJ0hWOS6RJekIzy

#Origine du notebook

Le code original de ce notebook est trouvable à l'adresse https://gist.github.com/gheesung/eb0076e040ba53d5be2ad2db1c70cf82

Il a été modifié pour convenir au projet actuel

## Clone the required files from Github

DmitryM8 version of Mobilenet is used.
"""

# Clone the libraries to setup the libraries

!git clone https://github.com/AIWintermuteAI/transfer_learning_sipeed.git
!git clone https://github.com/sipeed/Maix_Toolbox.git

"""### Install the tflite to kmodel conversion software
Note that there is a bug in the get_nncase.sh in the Maix_Toolbox which is unable to extract the file. The steps below is the same as the script but the typo error is fixed.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# cd Maix_Toolbox 
# mkdir -p ncc
# mkdir -p workspace
# mkdir -p images
# mkdir -p log
# cd ncc
# wget https://github.com/kendryte/nncase/releases/download/v0.1.0-rc5/ncc-linux-x86_64.tar.xz
# tar -Jxf ncc-linux-x86_64.tar.xz
# rm ncc-linux-x86_64.tar.xz
# echo "download nncase ok!"

"""## Build the model"""

import keras
import numpy as np
from keras import backend as K
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.models import Model
from keras.applications import imagenet_utils
from keras.layers import Dense, GlobalAveragePooling2D, Dropout,Flatten


import sys
sys.path.append('/content/transfer_learning_sipeed')
from mobilenet_sipeed.mobilenet import MobileNet

from keras.applications.mobilenet import preprocess_input

"""### Download the cancer sample dataset
Le dataset se situe à l'arborécences "instrumentation_avance_projet_final/Jupyter_notebook/files"
"""

# Commented out IPython magic to ensure Python compatibility.
# Download the cancer photos

# %cd /content
!git clone https://github.com/Theobl08/instrumentation_avance_projet_final.git

"""### Define the parameters"""

# the parameters
IMAGE_SIZE = 224
ALPHA=0.75
EPOCHS=20

def prepare_image(file):
    img_path = ''
    img = keras.utils.load_img(img_path + file, target_size=(IMAGE_SIZE, IMAGE_SIZE))
    img_array = keras.utils.img_to_array(img)
    img_array_expanded_dims = np.expand_dims(img_array, axis=0)
    return keras.applications.mobilenet.preprocess_input(img_array_expanded_dims)

# function to define dropout, hidden layers and the number of output
def build_finetune_model(base_model, dropout, fc_layers, num_classes):
    for layer in base_model.layers:
        layer.trainable = False

    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    
    for fc in fc_layers:
        # New FC layer, random init
        x = Dense(fc, activation='relu')(x) 
        x = Dropout(dropout)(x)

    # New softmax layer
    predictions = Dense(num_classes, activation='softmax')(x) 
    
    finetune_model = Model(inputs=base_model.input, outputs=predictions)

    return finetune_model

"""### Transfer Learning using Mobilenet V1"""

# Using MobileNetv1
base_model=MobileNet(input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3), alpha = ALPHA, 
                     depth_multiplier = 1, dropout = 0.001, include_top = False, 
                     weights = "imagenet", classes = 1000, backend=keras.backend, 
                     layers=keras.layers,models=keras.models,utils=keras.utils)

"""### Define the last few layers
I used 2 hidden layers and 100 and 50 nodes. More layers or nodes can be added but this will increase the model size and may not fit into Maixpy memory.
"""

FC_LAYERS = [100, 50]
dropout = 0.5

finetune_model = build_finetune_model(base_model, 
                                      dropout=dropout, 
                                      fc_layers=FC_LAYERS, 
                                      num_classes=3)

for i,layer in enumerate(finetune_model.layers):
    print(i,layer.name)

train_datagen=ImageDataGenerator(preprocessing_function=preprocess_input) #included in our dependencies

train_generator=train_datagen.flow_from_directory('/content/instrumentation_avance_projet_final/Jupyter_notebook/files/cancer',
                                                 target_size=(IMAGE_SIZE,IMAGE_SIZE),
                                                 color_mode='rgb',
                                                 batch_size=32,
                                                 class_mode='categorical', shuffle=True)

"""### Train the Model"""

finetune_model.summary()
finetune_model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])
step_size_train=train_generator.n//train_generator.batch_size
history = finetune_model.fit_generator(generator=train_generator,steps_per_epoch=step_size_train,epochs=EPOCHS, shuffle=True)

finetune_model.save('/content/my_model.h5')

# do a random test to confirm the model is working
preprocessed_image = prepare_image('/content/instrumentation_avance_projet_final/Jupyter_notebook/files/cancer_test/actinic_keratosis/ISIC_0024654.jpg')
predictions_cancer = finetune_model.predict(preprocessed_image) 
print(predictions_cancer[0][0]*100)    
print(predictions_cancer[0][1]*100) 
print(predictions_cancer[0][2]*100)

"""##Convert the Model
h5 --> tflite --> kmodel

###h5 --> tflite
"""

#convert keras to tflite format
!tflite_convert  --output_file=/content/model.tflite --keras_model_file=/content/my_model.h5


"""### Download the generated file"""

from google.colab import files

files.download('/content/model.tflite')
